"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window = void 0;
const Base_1 = require("./Base");
const timers_1 = require("timers");
class Window extends Base_1.BaseApi {
    constructor() {
        super(...arguments);
        this.prefix = 'nvim_win_';
    }
    /**
     * The windowid that not change within a Vim session
     */
    get id() {
        return this.data;
    }
    /** Get current buffer of window */
    get buffer() {
        return this.request(`${this.prefix}get_buf`, []);
    }
    /** Get the Tabpage that contains the window */
    get tabpage() {
        return this.request(`${this.prefix}get_tabpage`, []);
    }
    /** Get cursor position */
    get cursor() {
        return this.request(`${this.prefix}get_cursor`, []);
    }
    setCursor(pos, isNotify = false) {
        let method = isNotify ? 'notify' : 'request';
        return this[method](`${this.prefix}set_cursor`, [pos]);
    }
    /** Get window height by number of rows */
    get height() {
        return this.request(`${this.prefix}get_height`, []);
    }
    setHeight(height, isNotify = false) {
        let method = isNotify ? 'notify' : 'request';
        return this[method](`${this.prefix}set_height`, [height]);
    }
    /** Get window width by number of columns */
    get width() {
        return this.request(`${this.prefix}get_width`, []);
    }
    setWidth(width, isNotify = false) {
        let method = isNotify ? 'notify' : 'request';
        return this[method](`${this.prefix}set_height`, [width]);
    }
    /** Get window position */
    get position() {
        return this.request(`${this.prefix}get_position`, []);
    }
    /** 0-indexed, on-screen window position(row) in display cells. */
    get row() {
        return this.request(`${this.prefix}get_position`, []).then(position => position[0]);
    }
    /** 0-indexed, on-screen window position(col) in display cells. */
    get col() {
        return this.request(`${this.prefix}get_position`, []).then(position => position[1]);
    }
    /** Is window valid */
    get valid() {
        return this.request(`${this.prefix}is_valid`, []);
    }
    /** Get window number */
    get number() {
        return this.request(`${this.prefix}get_number`, []);
    }
    setConfig(options, isNotify) {
        let method = isNotify ? 'notify' : 'request';
        return this[method](`${this.prefix}set_config`, [options]);
    }
    getConfig() {
        return this.request(`${this.prefix}get_config`, []);
    }
    close(force, isNotify) {
        if (isNotify) {
            this.notify(`${this.prefix}close`, [force]);
            let count = 0;
            let interval = setInterval(() => {
                if (count == 5)
                    return timers_1.clearInterval(interval);
                this.request(`${this.prefix}is_valid`, []).then(valid => {
                    if (!valid) {
                        timers_1.clearInterval(interval);
                    }
                    else {
                        this.notify(`${this.prefix}close`, [force]);
                    }
                }, () => {
                    timers_1.clearInterval(interval);
                });
                count++;
            }, 50);
            return null;
        }
        return this.request(`${this.prefix}close`, [force]);
    }
    highlightRanges(hlGroup, ranges, priority = 10, isNotify) {
        if (isNotify) {
            this.client.call('coc#highlight#match_ranges', [this.id, 0, ranges, hlGroup, priority], true);
            return undefined;
        }
        return this.client.call('coc#highlight#match_ranges', [this.id, 0, ranges, hlGroup, priority]);
    }
    /**
     * Clear match by highlight group.
     */
    clearMatchGroup(hlGroup) {
        this.client.call('coc#highlight#clear_match_group', [this.id, hlGroup], true);
    }
    /**
     * Clear match by match ids.
     */
    clearMatches(ids) {
        this.client.call('coc#highlight#clear_matches', [this.id, ids], true);
    }
}
exports.Window = Window;
